{"version":3,"file":"index.es.js","sources":["../node_modules/bech32/index.js","../src/registry/name-service.ts","../src/registry/icns.ts","../src/registry/ibc-domains.ts","../src/registry/stargaze-names.ts","../src/registry/arch-id.ts","../src/utils/space-id-helper.ts","../src/registry/space-id/space-id.ts","../src/registry/sns.ts","../src/registry/bdd.ts","../src/registry/nib-id.ts","../src/registry/degens.ts","../src/utils/domain.ts","../src/registry/registry.ts","../src/index.ts"],"sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n","import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate'\n/**\n * Types of errors\n */\nexport enum MatchaErrorType {\n  NETWORK = 'network',\n  NOT_FOUND = 'not-found',\n  UNREGISTERED_SERVICE = 'unregistered-service',\n  DUPLICATE_SERVICE = 'duplicate-service',\n  INVALID_ADDRESS = 'invalid-address',\n  UNAVAILABLE_METHOD = 'invalid-address'\n}\n\n/**\n * Custom error class\n */\nexport class MatchaError extends Error {\n  public type: MatchaErrorType\n  constructor(message: string, errorType: MatchaErrorType) {\n    super(message)\n    this.name = 'MatchaError'\n    this.type = errorType\n  }\n}\n\nexport type Addr = {\n  prefix: string | null\n  words: number[] | null\n}\n\nexport type Network = 'mainnet' | 'testnet'\n\nexport type AllowedTopLevelDomains = {\n  icns?: string[]\n  ibcDomains?: string[]\n  archIds?: string[]\n  stargazeNames?: string[]\n  spaceIds?: string[]\n  sns?: string[]\n  bdd?: string[]\n  nibId?: string[]\n  degeNS?: string[]\n}\n\nexport type rpcUrls = Record<Network, string>\n\nexport type RpcURLs = {\n  icns?: rpcUrls\n  ibcDomains?: rpcUrls\n  archIds?: rpcUrls\n  stargazeNames?: rpcUrls\n  spaceIds?: rpcUrls\n  sns?: rpcUrls,\n  bdd?: rpcUrls\n  nibId?: rpcUrls\n  degeNS?: rpcUrls\n}\n\nclass CosmWasmClientHandler {\n  private static clients: { [key: string]: CosmWasmClient } = {}\n\n  static getClient = async (rpcUrl: string) => {\n    let _client = this.clients[rpcUrl]\n    if (_client === undefined) {\n      _client = await CosmWasmClient.connect(rpcUrl)\n      this.clients[rpcUrl] = _client\n    }\n    return _client\n  }\n}\n\n/**\n * What a NameService class needs to implement\n */\nexport abstract class NameService {\n  /**\n   * The unique identifier of the name service\n   */\n  abstract serviceID: string\n  /**\n   * The chain on which the name service is deployed\n   */\n  abstract chain: string | string[]\n  /**\n   * The contract address of the name service\n   */\n  abstract contractAddress:\n    | {\n        [key in Network]: string\n      }\n    | Record<string, { [key in Network]: string }>\n  /**\n   * @param name Resolve this name into an address\n   */\n  abstract resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string>\n  /**\n   * @param address Lookup this address and returns primary name\n   */\n  abstract lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string>\n  /**\n   * @param network The network to use\n   */\n  getCosmWasmClient(rpcUrl: string): Promise<CosmWasmClient> {\n    return CosmWasmClientHandler.getClient(rpcUrl)\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/osmosis',\n  testnet: 'https://rpc-test.osmosis.zone'\n}\n\nexport const serviceID = 'icns'\n\nexport class ICNS extends NameService {\n  serviceID = serviceID\n  chain = 'osmosis'\n  contractAddress = {\n    mainnet: 'osmo1xk0s8xgktn9x5vwcgtjdxqzadg88fgn33p8u9cnpdxwemvxscvast52cdd',\n    testnet: 'osmo1q2qpencrnnlamwalxt6tac2ytl35z5jejn0v4frnp6jff7gwp37sjcnhu5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          address: {\n            name: username,\n            bech32_prefix: prefix\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        options?.allowedTopLevelDomains?.icns?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_name: {\n            address\n          }\n        }\n      )\n      if (!res?.name) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.name}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/juno',\n  testnet: 'https://rpc.uni.kingnodes.com'\n}\n\nexport const serviceID = 'ibcDomains'\n\nexport class IBCDomains extends NameService {\n  serviceID = serviceID\n  chain = 'juno'\n  contractAddress = {\n    mainnet: 'juno1ce7wjfsuk79t2mdvpdjtv8280pcc64yh9mh62qptuvxe64twt4pqa68z2a',\n    testnet: 'juno19al2ptpxz3xk6q8nl3eyvyslkz8g6nz25w48dfpaepwaxavq3mhqsjjqe5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          owner_of: {\n            token_id: username\n          }\n        }\n      )\n      if (\n        !res?.owner ||\n        options?.allowedTopLevelDomains?.ibcDomains?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res.owner)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    const junoAddress = encode('juno', addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_domain: {\n            address: junoAddress\n          }\n        }\n      )\n      if (!res?.domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.domain}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/stargaze',\n  testnet: 'https://rpc.elgafar-1.stargaze-apis.com'\n}\n\nexport const serviceID = 'stargazeNames'\n\nexport class StargazeNames extends NameService {\n  serviceID = serviceID\n  chain = 'stargaze'\n  contractAddress = {\n    mainnet: 'stars1fx74nkqkw2748av8j7ew7r3xt9cgjqduwn8m0ur5lhe49uhlsasszc5fhr',\n    testnet: 'stars1rp5ttjvd5g0vlpltrkyvq62tcrdz949gjtpah000ynh4n2laz52qarz2z8'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          associated_address: {\n            name: username\n          }\n        }\n      )\n\n      if (\n        !res ||\n        options?.allowedTopLevelDomains?.stargazeNames?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          name: {\n            address\n          }\n        }\n      )\n      return `${res}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.mainnet.archway.io',\n  testnet: 'https://rpc.constantine.archway.tech'\n}\n\nexport const serviceID = 'archIds'\n\nexport class ArchIdNames extends NameService {\n  serviceID = serviceID\n  chain = 'archway'\n  contractAddress = {\n    mainnet:\n      'archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0',\n    testnet:\n      'archway1lr8rstt40s697hqpedv2nvt27f4cuccqwvly9gnvuszxmcevrlns60xw4r'\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-resolve-address-js\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: name\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        options?.allowedTopLevelDomains?.archIds?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-check-domains-resolve-to-address-js\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_address: {\n            address: address\n          }\n        }\n      )\n      if (!res?.names || !res?.names?.length) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.names.join(', ')\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","/**\n * This file contains helper functions that are used in Space ID .inj and .sei domain resolution and lookups\n * Reference: https://github.com/Space-ID/injective-sidjs/tree/main/src/utils\n */\n\nimport * as jsSha3 from 'js-sha3'\nimport { toUnicode } from 'idna-uts46-hx'\n\nconst { keccak_256: sha3 } = jsSha3\n\nconst normalize = (name: string) => {\n  return name ? toUnicode(name, { useStd3ASCII: true }) : name\n}\n\nconst decodeLabelhash = (hash: string) => {\n  if (!(hash.startsWith('[') && hash.endsWith(']'))) {\n    throw Error(\n      'Expected encoded labelhash to start and end with square brackets'\n    )\n  }\n\n  if (hash.length !== 66) {\n    throw Error('Expected encoded labelhash to have a length of 66')\n  }\n\n  return `${hash.slice(1, -1)}`\n}\n\nconst isEncodedLabelhash = (hash: string) => {\n  return hash.startsWith('[') && hash.endsWith(']') && hash.length === 66\n}\n\nconst namehash = (inputName: string) => {\n  let node = ''\n  for (let i = 0; i < 32; i++) {\n    node += '00'\n  }\n\n  if (inputName) {\n    const labels = inputName.split('.')\n\n    for (let i = labels.length - 1; i >= 0; i--) {\n      let labelSha\n      if (isEncodedLabelhash(labels[i])) {\n        labelSha = decodeLabelhash(labels[i])\n      } else {\n        const normalisedLabel = normalize(labels[i])\n        labelSha = sha3(normalisedLabel)\n      }\n      node = sha3(Buffer.from(node + labelSha, 'hex'))\n    }\n  }\n  return '0x' + node\n}\n\nexport function domainNode(domain: string) {\n  if (!domain) {\n    return []\n  }\n  const hash = namehash(domain)\n  return Array.from(Buffer.from(hash.slice(2), 'hex'))\n}\n","import {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from '../name-service'\nimport { domainNode } from '../../utils/space-id-helper'\nimport { decode } from 'bech32'\n\ntype SupportedSpaceIdDomains = 'inj' | 'sei'\n\nconst chainRpcUrls: Record<SupportedSpaceIdDomains, Record<Network, string>> = {\n  inj: {\n    mainnet: 'https://tm.injective.network',\n    testnet: 'https://testnet.tm.injective.dev'\n  },\n  sei: {\n    mainnet: 'https://rpc.wallet.pacific-1.sei.io',\n    testnet: 'https://sei-testnet-rpc.polkachu.com'\n  }\n}\n\nexport const serviceID = 'spaceIds'\n\nexport class SpaceIds extends NameService {\n  serviceID = serviceID\n  chain = ['injective', 'sei']\n  contractAddress: Record<SupportedSpaceIdDomains, Record<Network, string>> = {\n    inj: {\n      mainnet: 'inj1x9m0hceug9qylcyrrtwqtytslv2jrph433thgu',\n      testnet: 'inj1ppneyx6qfnye26k9mwnf3ngyelvqng67f5v948'\n    },\n    sei: {\n      mainnet: 'sei1qujw7gxacyk08fpg0lsf377f727ldq8f9cmjlrxt6awdkag9ypjsdnkh98',\n      testnet: 'sei1a59k7mc9hsvtaeu532etl2geqmqdyufjncjkg0h3lxsu5u2rpensanaxwf'\n    }\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n    }\n  ): Promise<string> {\n    try {\n      const [, prefix] = name.split('.')\n      const rpcUrl =\n        chainRpcUrls?.[prefix as SupportedSpaceIdDomains]?.[network]\n      const contractAddress =\n        this.contractAddress[prefix as SupportedSpaceIdDomains][network]\n      if (rpcUrl && contractAddress) {\n        const client = await this.getCosmWasmClient(rpcUrl)\n        const res = await client?.queryContractSmart(contractAddress, {\n          address: {\n            node: domainNode(name)\n          }\n        })\n        if (\n          !res?.address ||\n          options?.allowedTopLevelDomains?.spaceIds?.indexOf(prefix) === -1\n        ) {\n          throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n        }\n        return res?.address\n      } else {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const rpcUrl =\n        chainRpcUrls?.[addr.prefix as SupportedSpaceIdDomains]?.[network]\n      const contractAddress =\n        this.contractAddress[addr.prefix as SupportedSpaceIdDomains][network]\n      if (rpcUrl && contractAddress) {\n        const client = await this.getCosmWasmClient(rpcUrl)\n        const res = await client?.queryContractSmart(contractAddress, {\n          name: {\n            address: address.toLowerCase()\n          }\n        })\n\n        if (!res?.name) {\n          throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n        }\n        const domain = res.name.endsWith(addr.prefix)\n          ? res.name\n          : res.name + addr.prefix\n        return domain\n      } else {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\nimport { decode, fromWords } from 'bech32'\n\nexport const serviceID = 'sns'\n\nconst rpcUrls = {\n  mainnet: 'https://injective-rpc.publicnode.com:443',\n  testnet: 'https://testnet.sentry.tm.injective.network:443'\n}\n\nconst trimTld = (x: string): string => {\n  if (x.endsWith('.sol')) {\n    return x.slice(0, -4)\n  }\n  return x\n}\n\nexport class SNS extends NameService {\n  serviceID = serviceID\n  chain = 'injective'\n  contractAddress = {\n    mainnet: 'inj1v7chmgm7vmuwldjt80utmw9c95jkrch979ps8z',\n    testnet: 'inj1q79ujqyh72p43mhr2ldaly3x6d50rzp3354at3'\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve: {\n            domain_name: trimTld(name)\n          }\n        }\n      )\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const decoded = decode(address)\n      const bytes = fromWords(decoded.words)\n      const addressBytes = [...new Array(12).fill(0), ...bytes]\n\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          get_domains_for_owner: {\n            owner_chain: 19,\n            owner_address: addressBytes,\n            max_len: 1,\n            domain_offset: undefined\n          }\n        }\n      )\n\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      const domain = result?.domains?.pop?.()\n      if (!domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return domain + '.sol'\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  Addr,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\nimport { decode, encode } from 'bech32'\n\nexport const serviceID = 'bdd'\n\nconst rpcUrls = {\n  mainnet: 'https://full-node.mainnet-1.coreum.dev:26657',\n  testnet: 'https://full-node.testnet-1.coreum.dev:26657'\n}\n\nexport class BDD extends NameService {\n  serviceID = serviceID\n  chain = 'coreum'\n  contractAddress = {\n    mainnet: 'core1z22n0xy004sxm5w9fms48exwpl3vwqxd890nt8ve0kwjj048tgqstlqf6f',\n    testnet: 'testcore1uwe9yemth6gr58tm56sx3u37t0c5rhmk963fjt480y4nz3cfxers9fn2kh'\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve: {\n            name\n          }\n        }\n      )\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n\n    const prefix = network === 'mainnet' ? 'core' : 'testcore'\n    const coreAddress = encode(prefix, addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary: {\n            address: coreAddress\n          }\n        }\n      )\n      if (!res) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nexport const serviceID = 'nibId'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.nibiru.fi:443',\n  testnet: 'https://rpc.testnet-2.nibiru.fi:443'\n}\n\nconst trimTld = (x: string): string => {\n  if (x.endsWith('.nibi')) {\n    return x.slice(0, -5)\n  }\n  return x\n}\n\nexport class NibId extends NameService {\n  serviceID = serviceID\n  chain = 'nibiru'\n  contractAddress = {\n    mainnet: 'nibi1q0e70vhrv063eah90mu97sazhywmeegptx642t5px7yfcrf0rrsq2dylen',\n    testnet: ''\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: trimTld(name)\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.address\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    throw new MatchaError(`Lookup is unavailable for ${address} on ${network}`, MatchaErrorType.UNAVAILABLE_METHOD)\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nexport const serviceID = 'degeNS'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.sei-apis.com:443'\n}\n\nexport class DegeNS extends NameService {\n  serviceID = serviceID\n  chain = 'sei'\n  contractAddress = {\n    mainnet: 'sei10nulnfpdhx2wf7lp9kqa8aez2yxuyxwjyfw9rzlrexd500nhal0sl7mtzm',\n    testnet: ''\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    if (network === 'testnet') {\n      throw new MatchaError(\n        `Resolve is unavailable for ${name} on ${network}`,\n        MatchaErrorType.UNAVAILABLE_METHOD\n      )\n    }\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          extension: {\n            msg: {\n              resolves_to: {\n                domain_name: name\n              }\n            }\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.address\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    if (network === 'testnet') {\n      throw new MatchaError(\n        `Lookup is unavailable for ${address} on ${network}`,\n        MatchaErrorType.UNAVAILABLE_METHOD\n      )\n    }\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          extension: {\n            msg: {\n              primary_of: {\n                owner: address\n              }\n            }\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.domain_name\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { AllowedTopLevelDomains } from '../registry/name-service'\n\nexport const supportedTopLevelDomainListForAllChains = [\n  'agoric',\n  'akash',\n  'arkh',\n  'axelar',\n  'band',\n  'bcna',\n  'bitsong',\n  'bostrom',\n  'cerberus',\n  'certik',\n  'cheqd',\n  'chihuahua',\n  'chronic',\n  'comdex',\n  'cosmos',\n  'crc',\n  'cre',\n  'cro',\n  'cudos',\n  'darc',\n  'decentr',\n  'desmos',\n  'dig',\n  'echelon',\n  'emoney',\n  'evmos',\n  'fetch',\n  'firma',\n  'galaxy',\n  'genesis',\n  'gravity',\n  'iaa',\n  'inj',\n  'ixo',\n  'juno',\n  'kava',\n  'ki',\n  'like',\n  'logos',\n  'lum',\n  'mantle',\n  'mars',\n  'meme',\n  'micro',\n  'mythos',\n  'nomic',\n  'octa',\n  'odin',\n  'orai',\n  'osmo',\n  'panacea',\n  'pb',\n  'persistence',\n  'regen',\n  'rizon',\n  'secret',\n  'sent',\n  'sif',\n  'somm',\n  'star',\n  'stars',\n  'swth',\n  'terra',\n  'thor',\n  'umee',\n  'vdl',\n  'kujira',\n  'sei',\n  'stride',\n  'jkl',\n  'tori',\n  'omniflix',\n  'canto',\n  'pasg',\n  'archway',\n  'quasar',\n  'neutron',\n  'testcore',\n  'core',\n  'quick',\n  'migaloo',\n  'kyve',\n  'onomy',\n  'noble',\n  'plq',\n  'nolus',\n  'c4e',\n  'gitopia',\n  'nibi',\n  'maya',\n  'empower',\n  'dydx'\n]\n\nexport const allowedTopLevelDomains: AllowedTopLevelDomains = {\n  icns: supportedTopLevelDomainListForAllChains,\n  ibcDomains: supportedTopLevelDomainListForAllChains,\n  stargazeNames: supportedTopLevelDomainListForAllChains,\n  archIds: ['arch'],\n  spaceIds: ['inj', 'sei'],\n  sns: ['sol'],\n  nibId: ['nibi'],\n  degeNS: ['pp', 'sei'],\n  bdd: ['core']\n}\n","import { ICNS, serviceID as _icnsID } from './icns'\nimport { IBCDomains, serviceID as _ibcDomainsID } from './ibc-domains'\nimport { StargazeNames, serviceID as _stargazeNamesID } from './stargaze-names'\nimport { ArchIdNames, serviceID as _archId } from './arch-id'\nimport { SpaceIds, serviceID as _spaceId } from './space-id/space-id'\nimport { SNS, serviceID as _sns } from './sns'\nimport { BDD, serviceID as _bdd } from './bdd'\nimport { NibId, serviceID as _nibId } from './nib-id'\nimport { DegeNS, serviceID as _degeNS } from './degens'\nimport {\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\nimport { allowedTopLevelDomains as allowedTopLevelDomainData } from '../utils/domain'\n\nexport const services = {\n  icns: _icnsID,\n  ibcDomains: _ibcDomainsID,\n  stargazeNames: _stargazeNamesID,\n  archIds: _archId,\n  spaceIds: _spaceId,\n  sns: _sns,\n  bdd: _bdd,\n  nibId: _nibId,\n  degeNS: _degeNS\n}\n\nexport const allowedTopLevelDomains = allowedTopLevelDomainData\n\nexport class Registry {\n  private services: { [key: string]: NameService } = {}\n\n  constructor(private network: Network) {\n    this.network = network\n    this.registerService(new ICNS())\n    this.registerService(new IBCDomains())\n    this.registerService(new StargazeNames())\n    this.registerService(new ArchIdNames())\n    this.registerService(new SpaceIds())\n    this.registerService(new SNS())\n    this.registerService(new BDD())\n    this.registerService(new NibId())\n    this.registerService(new DegeNS())\n  }\n\n  registerService(service: NameService) {\n    if (this.services[service.serviceID]) {\n      throw new MatchaError(\n        'Service already registered',\n        MatchaErrorType.DUPLICATE_SERVICE\n      )\n    }\n    this.services[service.serviceID] = service\n  }\n\n  private getService(serviceID: string): NameService {\n    const service = this.services[serviceID]\n    if (!service) {\n      throw new MatchaError(\n        'Service not registered',\n        MatchaErrorType.UNREGISTERED_SERVICE\n      )\n    }\n    return service\n  }\n\n  listServices(): string[] {\n    return Object.keys(this.services)\n  }\n\n  setNetwork(network: Network) {\n    this.network = network\n  }\n\n  getNetwork(): Network {\n    return this.network\n  }\n\n  async resolve(\n    name: string,\n    serviceID: string,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.resolve(name, this.network, options)\n  }\n\n  async lookup(\n    address: string,\n    serviceID: string,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.lookup(address, this.network, options)\n  }\n\n  async resolveAll(\n    name: string,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: {\n        [key: string]: { [key in Network]: string }\n      }\n    }\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.resolve(name, this.network, options)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n\n  async lookupAll(\n    address: string,\n    options?: {\n      rpcUrls?: {\n        [key: string]: { [key in Network]: string }\n      }\n    }\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.lookup(address, this.network, options)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n}\n","import {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  services,\n  allowedTopLevelDomains,\n  AllowedTopLevelDomains,\n  Network,\n  RpcURLs\n} from './registry'\n\n/**\n * Instance of registry class\n *\n * It has all required methods - resolve, lookup, resolveAll, lookupAll\n *\n * For advanced users: you can register your own name service via registerService method. It\n * accepts NameService (abstract) class instance as an argument.\n */\nconst registry = new Registry('mainnet')\n\nexport type {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  AllowedTopLevelDomains,\n  Network,\n  RpcURLs\n}\n\nexport { services, allowedTopLevelDomains, registry }\n"],"names":["ALPHABET","ALPHABET_MAP","z","x","polymodStep","pre","b","prefixChk","prefix","chk","i","c","v","encode","words","LIMIT","result","__decode","str","lowered","uppered","split","wordChars","decodeUnsafe","res","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","toWords","fromWordsUnsafe","fromWords","bech32","MatchaErrorType","MatchaError","message","errorType","__publicField","_CosmWasmClientHandler","CosmWasmClientHandler","rpcUrl","_client","CosmWasmClient","NameService","rpcUrls","serviceID","ICNS","name","network","options","client","_b","_a","username","_d","_c","address","addr","IBCDomains","junoAddress","StargazeNames","ArchIdNames","sha3","jsSha3","normalize","toUnicode","decodeLabelhash","hash","isEncodedLabelhash","namehash","inputName","node","labels","labelSha","normalisedLabel","domainNode","domain","chainRpcUrls","SpaceIds","contractAddress","trimTld","SNS","decoded","addressBytes","BDD","coreAddress","NibId","DegeNS","supportedTopLevelDomainListForAllChains","allowedTopLevelDomains","services","_icnsID","_ibcDomainsID","_stargazeNamesID","_archId","_spaceId","_sns","_bdd","_nibId","_degeNS","allowedTopLevelDomainData","Registry","service","record","registry"],"mappings":"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","x_google_ignoreList":[0]}