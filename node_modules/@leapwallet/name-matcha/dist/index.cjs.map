{"version":3,"file":"index.cjs","sources":["../node_modules/bech32/index.js","../src/registry/name-service.ts","../src/registry/icns.ts","../src/registry/ibc-domains.ts","../src/registry/stargaze-names.ts","../src/registry/arch-id.ts","../src/utils/space-id-helper.ts","../src/registry/space-id/space-id.ts","../src/registry/sns.ts","../src/registry/bdd.ts","../src/registry/nib-id.ts","../src/registry/degens.ts","../src/utils/domain.ts","../src/registry/registry.ts","../src/index.ts"],"sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n","import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate'\n/**\n * Types of errors\n */\nexport enum MatchaErrorType {\n  NETWORK = 'network',\n  NOT_FOUND = 'not-found',\n  UNREGISTERED_SERVICE = 'unregistered-service',\n  DUPLICATE_SERVICE = 'duplicate-service',\n  INVALID_ADDRESS = 'invalid-address',\n  UNAVAILABLE_METHOD = 'invalid-address'\n}\n\n/**\n * Custom error class\n */\nexport class MatchaError extends Error {\n  public type: MatchaErrorType\n  constructor(message: string, errorType: MatchaErrorType) {\n    super(message)\n    this.name = 'MatchaError'\n    this.type = errorType\n  }\n}\n\nexport type Addr = {\n  prefix: string | null\n  words: number[] | null\n}\n\nexport type Network = 'mainnet' | 'testnet'\n\nexport type AllowedTopLevelDomains = {\n  icns?: string[]\n  ibcDomains?: string[]\n  archIds?: string[]\n  stargazeNames?: string[]\n  spaceIds?: string[]\n  sns?: string[]\n  bdd?: string[]\n  nibId?: string[]\n  degeNS?: string[]\n}\n\nexport type rpcUrls = Record<Network, string>\n\nexport type RpcURLs = {\n  icns?: rpcUrls\n  ibcDomains?: rpcUrls\n  archIds?: rpcUrls\n  stargazeNames?: rpcUrls\n  spaceIds?: rpcUrls\n  sns?: rpcUrls,\n  bdd?: rpcUrls\n  nibId?: rpcUrls\n  degeNS?: rpcUrls\n}\n\nclass CosmWasmClientHandler {\n  private static clients: { [key: string]: CosmWasmClient } = {}\n\n  static getClient = async (rpcUrl: string) => {\n    let _client = this.clients[rpcUrl]\n    if (_client === undefined) {\n      _client = await CosmWasmClient.connect(rpcUrl)\n      this.clients[rpcUrl] = _client\n    }\n    return _client\n  }\n}\n\n/**\n * What a NameService class needs to implement\n */\nexport abstract class NameService {\n  /**\n   * The unique identifier of the name service\n   */\n  abstract serviceID: string\n  /**\n   * The chain on which the name service is deployed\n   */\n  abstract chain: string | string[]\n  /**\n   * The contract address of the name service\n   */\n  abstract contractAddress:\n    | {\n        [key in Network]: string\n      }\n    | Record<string, { [key in Network]: string }>\n  /**\n   * @param name Resolve this name into an address\n   */\n  abstract resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string>\n  /**\n   * @param address Lookup this address and returns primary name\n   */\n  abstract lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string>\n  /**\n   * @param network The network to use\n   */\n  getCosmWasmClient(rpcUrl: string): Promise<CosmWasmClient> {\n    return CosmWasmClientHandler.getClient(rpcUrl)\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/osmosis',\n  testnet: 'https://rpc-test.osmosis.zone'\n}\n\nexport const serviceID = 'icns'\n\nexport class ICNS extends NameService {\n  serviceID = serviceID\n  chain = 'osmosis'\n  contractAddress = {\n    mainnet: 'osmo1xk0s8xgktn9x5vwcgtjdxqzadg88fgn33p8u9cnpdxwemvxscvast52cdd',\n    testnet: 'osmo1q2qpencrnnlamwalxt6tac2ytl35z5jejn0v4frnp6jff7gwp37sjcnhu5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          address: {\n            name: username,\n            bech32_prefix: prefix\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        options?.allowedTopLevelDomains?.icns?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_name: {\n            address\n          }\n        }\n      )\n      if (!res?.name) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.name}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/juno',\n  testnet: 'https://rpc.uni.kingnodes.com'\n}\n\nexport const serviceID = 'ibcDomains'\n\nexport class IBCDomains extends NameService {\n  serviceID = serviceID\n  chain = 'juno'\n  contractAddress = {\n    mainnet: 'juno1ce7wjfsuk79t2mdvpdjtv8280pcc64yh9mh62qptuvxe64twt4pqa68z2a',\n    testnet: 'juno19al2ptpxz3xk6q8nl3eyvyslkz8g6nz25w48dfpaepwaxavq3mhqsjjqe5'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          owner_of: {\n            token_id: username\n          }\n        }\n      )\n      if (\n        !res?.owner ||\n        options?.allowedTopLevelDomains?.ibcDomains?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res.owner)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    const junoAddress = encode('juno', addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary_domain: {\n            address: junoAddress\n          }\n        }\n      )\n      if (!res?.domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return `${res.domain}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode, encode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.cosmos.directory/stargaze',\n  testnet: 'https://rpc.elgafar-1.stargaze-apis.com'\n}\n\nexport const serviceID = 'stargazeNames'\n\nexport class StargazeNames extends NameService {\n  serviceID = serviceID\n  chain = 'stargaze'\n  contractAddress = {\n    mainnet: 'stars1fx74nkqkw2748av8j7ew7r3xt9cgjqduwn8m0ur5lhe49uhlsasszc5fhr',\n    testnet: 'stars1rp5ttjvd5g0vlpltrkyvq62tcrdz949gjtpah000ynh4n2laz52qarz2z8'\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n    const [username, prefix] = name.split('.')\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          associated_address: {\n            name: username\n          }\n        }\n      )\n\n      if (\n        !res ||\n        options?.allowedTopLevelDomains?.stargazeNames?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      try {\n        const { words } = decode(res)\n        return encode(prefix, words)\n      } catch {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          name: {\n            address\n          }\n        }\n      )\n      return `${res}.${addr.prefix}`\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { decode } from 'bech32'\nimport {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.mainnet.archway.io',\n  testnet: 'https://rpc.constantine.archway.tech'\n}\n\nexport const serviceID = 'archIds'\n\nexport class ArchIdNames extends NameService {\n  serviceID = serviceID\n  chain = 'archway'\n  contractAddress = {\n    mainnet:\n      'archway1275jwjpktae4y4y0cdq274a2m0jnpekhttnfuljm6n59wnpyd62qppqxq0',\n    testnet:\n      'archway1lr8rstt40s697hqpedv2nvt27f4cuccqwvly9gnvuszxmcevrlns60xw4r'\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-resolve-address-js\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const [, prefix] = name.split('.')\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: name\n          }\n        }\n      )\n      if (\n        !res?.address ||\n        options?.allowedTopLevelDomains?.archIds?.indexOf(prefix) === -1\n      ) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.address\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  // reference: https://gist.github.com/drewstaylor/088af645dd36c013c02a2b4d05110479#file-archid-check-domains-resolve-to-address-js\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_address: {\n            address: address\n          }\n        }\n      )\n      if (!res?.names || !res?.names?.length) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res.names.join(', ')\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","/**\n * This file contains helper functions that are used in Space ID .inj and .sei domain resolution and lookups\n * Reference: https://github.com/Space-ID/injective-sidjs/tree/main/src/utils\n */\n\nimport * as jsSha3 from 'js-sha3'\nimport { toUnicode } from 'idna-uts46-hx'\n\nconst { keccak_256: sha3 } = jsSha3\n\nconst normalize = (name: string) => {\n  return name ? toUnicode(name, { useStd3ASCII: true }) : name\n}\n\nconst decodeLabelhash = (hash: string) => {\n  if (!(hash.startsWith('[') && hash.endsWith(']'))) {\n    throw Error(\n      'Expected encoded labelhash to start and end with square brackets'\n    )\n  }\n\n  if (hash.length !== 66) {\n    throw Error('Expected encoded labelhash to have a length of 66')\n  }\n\n  return `${hash.slice(1, -1)}`\n}\n\nconst isEncodedLabelhash = (hash: string) => {\n  return hash.startsWith('[') && hash.endsWith(']') && hash.length === 66\n}\n\nconst namehash = (inputName: string) => {\n  let node = ''\n  for (let i = 0; i < 32; i++) {\n    node += '00'\n  }\n\n  if (inputName) {\n    const labels = inputName.split('.')\n\n    for (let i = labels.length - 1; i >= 0; i--) {\n      let labelSha\n      if (isEncodedLabelhash(labels[i])) {\n        labelSha = decodeLabelhash(labels[i])\n      } else {\n        const normalisedLabel = normalize(labels[i])\n        labelSha = sha3(normalisedLabel)\n      }\n      node = sha3(Buffer.from(node + labelSha, 'hex'))\n    }\n  }\n  return '0x' + node\n}\n\nexport function domainNode(domain: string) {\n  if (!domain) {\n    return []\n  }\n  const hash = namehash(domain)\n  return Array.from(Buffer.from(hash.slice(2), 'hex'))\n}\n","import {\n  Addr,\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from '../name-service'\nimport { domainNode } from '../../utils/space-id-helper'\nimport { decode } from 'bech32'\n\ntype SupportedSpaceIdDomains = 'inj' | 'sei'\n\nconst chainRpcUrls: Record<SupportedSpaceIdDomains, Record<Network, string>> = {\n  inj: {\n    mainnet: 'https://tm.injective.network',\n    testnet: 'https://testnet.tm.injective.dev'\n  },\n  sei: {\n    mainnet: 'https://rpc.wallet.pacific-1.sei.io',\n    testnet: 'https://sei-testnet-rpc.polkachu.com'\n  }\n}\n\nexport const serviceID = 'spaceIds'\n\nexport class SpaceIds extends NameService {\n  serviceID = serviceID\n  chain = ['injective', 'sei']\n  contractAddress: Record<SupportedSpaceIdDomains, Record<Network, string>> = {\n    inj: {\n      mainnet: 'inj1x9m0hceug9qylcyrrtwqtytslv2jrph433thgu',\n      testnet: 'inj1ppneyx6qfnye26k9mwnf3ngyelvqng67f5v948'\n    },\n    sei: {\n      mainnet: 'sei1qujw7gxacyk08fpg0lsf377f727ldq8f9cmjlrxt6awdkag9ypjsdnkh98',\n      testnet: 'sei1a59k7mc9hsvtaeu532etl2geqmqdyufjncjkg0h3lxsu5u2rpensanaxwf'\n    }\n  }\n\n  async resolve(\n    name: string,\n    network: Network,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n    }\n  ): Promise<string> {\n    try {\n      const [, prefix] = name.split('.')\n      const rpcUrl =\n        chainRpcUrls?.[prefix as SupportedSpaceIdDomains]?.[network]\n      const contractAddress =\n        this.contractAddress[prefix as SupportedSpaceIdDomains][network]\n      if (rpcUrl && contractAddress) {\n        const client = await this.getCosmWasmClient(rpcUrl)\n        const res = await client?.queryContractSmart(contractAddress, {\n          address: {\n            node: domainNode(name)\n          }\n        })\n        if (\n          !res?.address ||\n          options?.allowedTopLevelDomains?.spaceIds?.indexOf(prefix) === -1\n        ) {\n          throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n        }\n        return res?.address\n      } else {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n    try {\n      const rpcUrl =\n        chainRpcUrls?.[addr.prefix as SupportedSpaceIdDomains]?.[network]\n      const contractAddress =\n        this.contractAddress[addr.prefix as SupportedSpaceIdDomains][network]\n      if (rpcUrl && contractAddress) {\n        const client = await this.getCosmWasmClient(rpcUrl)\n        const res = await client?.queryContractSmart(contractAddress, {\n          name: {\n            address: address.toLowerCase()\n          }\n        })\n\n        if (!res?.name) {\n          throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n        }\n        const domain = res.name.endsWith(addr.prefix)\n          ? res.name\n          : res.name + addr.prefix\n        return domain\n      } else {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\nimport { decode, fromWords } from 'bech32'\n\nexport const serviceID = 'sns'\n\nconst rpcUrls = {\n  mainnet: 'https://injective-rpc.publicnode.com:443',\n  testnet: 'https://testnet.sentry.tm.injective.network:443'\n}\n\nconst trimTld = (x: string): string => {\n  if (x.endsWith('.sol')) {\n    return x.slice(0, -4)\n  }\n  return x\n}\n\nexport class SNS extends NameService {\n  serviceID = serviceID\n  chain = 'injective'\n  contractAddress = {\n    mainnet: 'inj1v7chmgm7vmuwldjt80utmw9c95jkrch979ps8z',\n    testnet: 'inj1q79ujqyh72p43mhr2ldaly3x6d50rzp3354at3'\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve: {\n            domain_name: trimTld(name)\n          }\n        }\n      )\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const decoded = decode(address)\n      const bytes = fromWords(decoded.words)\n      const addressBytes = [...new Array(12).fill(0), ...bytes]\n\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          get_domains_for_owner: {\n            owner_chain: 19,\n            owner_address: addressBytes,\n            max_len: 1,\n            domain_offset: undefined\n          }\n        }\n      )\n\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      const domain = result?.domains?.pop?.()\n      if (!domain) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return domain + '.sol'\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  Addr,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\nimport { decode, encode } from 'bech32'\n\nexport const serviceID = 'bdd'\n\nconst rpcUrls = {\n  mainnet: 'https://full-node.mainnet-1.coreum.dev:26657',\n  testnet: 'https://full-node.testnet-1.coreum.dev:26657'\n}\n\nexport class BDD extends NameService {\n  serviceID = serviceID\n  chain = 'coreum'\n  contractAddress = {\n    mainnet: 'core1z22n0xy004sxm5w9fms48exwpl3vwqxd890nt8ve0kwjj048tgqstlqf6f',\n    testnet: 'testcore1uwe9yemth6gr58tm56sx3u37t0c5rhmk963fjt480y4nz3cfxers9fn2kh'\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve: {\n            name\n          }\n        }\n      )\n      if (!result) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(\n    address: string,\n    network: Network,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const client = await this.getCosmWasmClient(\n      options?.rpcUrls?.[serviceID]?.[network] ?? rpcUrls[network]\n    )\n\n    const addr: Addr = {\n      prefix: null,\n      words: null\n    }\n    try {\n      const { prefix, words } = decode(address)\n      addr.prefix = prefix\n      addr.words = words\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.INVALID_ADDRESS)\n    }\n\n    const prefix = network === 'mainnet' ? 'core' : 'testcore'\n    const coreAddress = encode(prefix, addr.words)\n    try {\n      const res = await client?.queryContractSmart(\n        this.contractAddress[network],\n        {\n          primary: {\n            address: coreAddress\n          }\n        }\n      )\n      if (!res) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return res\n    } catch (e) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nexport const serviceID = 'nibId'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.nibiru.fi:443',\n  testnet: 'https://rpc.testnet-2.nibiru.fi:443'\n}\n\nconst trimTld = (x: string): string => {\n  if (x.endsWith('.nibi')) {\n    return x.slice(0, -5)\n  }\n  return x\n}\n\nexport class NibId extends NameService {\n  serviceID = serviceID\n  chain = 'nibiru'\n  contractAddress = {\n    mainnet: 'nibi1q0e70vhrv063eah90mu97sazhywmeegptx642t5px7yfcrf0rrsq2dylen',\n    testnet: ''\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          resolve_record: {\n            name: trimTld(name)\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.address\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    throw new MatchaError(`Lookup is unavailable for ${address} on ${network}`, MatchaErrorType.UNAVAILABLE_METHOD)\n  }\n}\n","import {\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network\n} from './name-service'\n\nexport const serviceID = 'degeNS'\n\nconst rpcUrls = {\n  mainnet: 'https://rpc.sei-apis.com:443'\n}\n\nexport class DegeNS extends NameService {\n  serviceID = serviceID\n  chain = 'sei'\n  contractAddress = {\n    mainnet: 'sei10nulnfpdhx2wf7lp9kqa8aez2yxuyxwjyfw9rzlrexd500nhal0sl7mtzm',\n    testnet: ''\n  }\n\n  async resolve(name: string, network: Network): Promise<string> {\n    if (network === 'testnet') {\n      throw new MatchaError(\n        `Resolve is unavailable for ${name} on ${network}`,\n        MatchaErrorType.UNAVAILABLE_METHOD\n      )\n    }\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          extension: {\n            msg: {\n              resolves_to: {\n                domain_name: name\n              }\n            }\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.address\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n\n  async lookup(address: string, network: Network): Promise<string> {\n    if (network === 'testnet') {\n      throw new MatchaError(\n        `Lookup is unavailable for ${address} on ${network}`,\n        MatchaErrorType.UNAVAILABLE_METHOD\n      )\n    }\n    const client = await this.getCosmWasmClient(rpcUrls[network])\n    if (this.contractAddress[network] == '') {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n    try {\n      const result = await client.queryContractSmart(\n        this.contractAddress[network],\n        {\n          extension: {\n            msg: {\n              primary_of: {\n                owner: address\n              }\n            }\n          }\n        }\n      )\n      if (result == '' || result == null) {\n        throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n      }\n      return result?.domain_name\n    } catch (err) {\n      throw new MatchaError('', MatchaErrorType.NOT_FOUND)\n    }\n  }\n}\n","import { AllowedTopLevelDomains } from '../registry/name-service'\n\nexport const supportedTopLevelDomainListForAllChains = [\n  'agoric',\n  'akash',\n  'arkh',\n  'axelar',\n  'band',\n  'bcna',\n  'bitsong',\n  'bostrom',\n  'cerberus',\n  'certik',\n  'cheqd',\n  'chihuahua',\n  'chronic',\n  'comdex',\n  'cosmos',\n  'crc',\n  'cre',\n  'cro',\n  'cudos',\n  'darc',\n  'decentr',\n  'desmos',\n  'dig',\n  'echelon',\n  'emoney',\n  'evmos',\n  'fetch',\n  'firma',\n  'galaxy',\n  'genesis',\n  'gravity',\n  'iaa',\n  'inj',\n  'ixo',\n  'juno',\n  'kava',\n  'ki',\n  'like',\n  'logos',\n  'lum',\n  'mantle',\n  'mars',\n  'meme',\n  'micro',\n  'mythos',\n  'nomic',\n  'octa',\n  'odin',\n  'orai',\n  'osmo',\n  'panacea',\n  'pb',\n  'persistence',\n  'regen',\n  'rizon',\n  'secret',\n  'sent',\n  'sif',\n  'somm',\n  'star',\n  'stars',\n  'swth',\n  'terra',\n  'thor',\n  'umee',\n  'vdl',\n  'kujira',\n  'sei',\n  'stride',\n  'jkl',\n  'tori',\n  'omniflix',\n  'canto',\n  'pasg',\n  'archway',\n  'quasar',\n  'neutron',\n  'testcore',\n  'core',\n  'quick',\n  'migaloo',\n  'kyve',\n  'onomy',\n  'noble',\n  'plq',\n  'nolus',\n  'c4e',\n  'gitopia',\n  'nibi',\n  'maya',\n  'empower',\n  'dydx'\n]\n\nexport const allowedTopLevelDomains: AllowedTopLevelDomains = {\n  icns: supportedTopLevelDomainListForAllChains,\n  ibcDomains: supportedTopLevelDomainListForAllChains,\n  stargazeNames: supportedTopLevelDomainListForAllChains,\n  archIds: ['arch'],\n  spaceIds: ['inj', 'sei'],\n  sns: ['sol'],\n  nibId: ['nibi'],\n  degeNS: ['pp', 'sei'],\n  bdd: ['core']\n}\n","import { ICNS, serviceID as _icnsID } from './icns'\nimport { IBCDomains, serviceID as _ibcDomainsID } from './ibc-domains'\nimport { StargazeNames, serviceID as _stargazeNamesID } from './stargaze-names'\nimport { ArchIdNames, serviceID as _archId } from './arch-id'\nimport { SpaceIds, serviceID as _spaceId } from './space-id/space-id'\nimport { SNS, serviceID as _sns } from './sns'\nimport { BDD, serviceID as _bdd } from './bdd'\nimport { NibId, serviceID as _nibId } from './nib-id'\nimport { DegeNS, serviceID as _degeNS } from './degens'\nimport {\n  AllowedTopLevelDomains,\n  MatchaError,\n  MatchaErrorType,\n  NameService,\n  Network,\n  RpcURLs\n} from './name-service'\nimport { allowedTopLevelDomains as allowedTopLevelDomainData } from '../utils/domain'\n\nexport const services = {\n  icns: _icnsID,\n  ibcDomains: _ibcDomainsID,\n  stargazeNames: _stargazeNamesID,\n  archIds: _archId,\n  spaceIds: _spaceId,\n  sns: _sns,\n  bdd: _bdd,\n  nibId: _nibId,\n  degeNS: _degeNS\n}\n\nexport const allowedTopLevelDomains = allowedTopLevelDomainData\n\nexport class Registry {\n  private services: { [key: string]: NameService } = {}\n\n  constructor(private network: Network) {\n    this.network = network\n    this.registerService(new ICNS())\n    this.registerService(new IBCDomains())\n    this.registerService(new StargazeNames())\n    this.registerService(new ArchIdNames())\n    this.registerService(new SpaceIds())\n    this.registerService(new SNS())\n    this.registerService(new BDD())\n    this.registerService(new NibId())\n    this.registerService(new DegeNS())\n  }\n\n  registerService(service: NameService) {\n    if (this.services[service.serviceID]) {\n      throw new MatchaError(\n        'Service already registered',\n        MatchaErrorType.DUPLICATE_SERVICE\n      )\n    }\n    this.services[service.serviceID] = service\n  }\n\n  private getService(serviceID: string): NameService {\n    const service = this.services[serviceID]\n    if (!service) {\n      throw new MatchaError(\n        'Service not registered',\n        MatchaErrorType.UNREGISTERED_SERVICE\n      )\n    }\n    return service\n  }\n\n  listServices(): string[] {\n    return Object.keys(this.services)\n  }\n\n  setNetwork(network: Network) {\n    this.network = network\n  }\n\n  getNetwork(): Network {\n    return this.network\n  }\n\n  async resolve(\n    name: string,\n    serviceID: string,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.resolve(name, this.network, options)\n  }\n\n  async lookup(\n    address: string,\n    serviceID: string,\n    options?: {\n      rpcUrls?: RpcURLs\n    }\n  ): Promise<string> {\n    const service = this.getService(serviceID)\n    return service.lookup(address, this.network, options)\n  }\n\n  async resolveAll(\n    name: string,\n    options?: {\n      allowedTopLevelDomains?: AllowedTopLevelDomains\n      rpcUrls?: {\n        [key: string]: { [key in Network]: string }\n      }\n    }\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.resolve(name, this.network, options)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n\n  async lookupAll(\n    address: string,\n    options?: {\n      rpcUrls?: {\n        [key: string]: { [key in Network]: string }\n      }\n    }\n  ) {\n    const record: Record<string, string | null> = {}\n    await Promise.all(\n      Object.entries(this.services).map(async ([serviceID, service]) => {\n        try {\n          const result = await service.lookup(address, this.network, options)\n          record[serviceID] = result\n        } catch (e) {\n          record[serviceID] = null\n        }\n      })\n    )\n    return record\n  }\n}\n","import {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  services,\n  allowedTopLevelDomains,\n  AllowedTopLevelDomains,\n  Network,\n  RpcURLs\n} from './registry'\n\n/**\n * Instance of registry class\n *\n * It has all required methods - resolve, lookup, resolveAll, lookupAll\n *\n * For advanced users: you can register your own name service via registerService method. It\n * accepts NameService (abstract) class instance as an argument.\n */\nconst registry = new Registry('mainnet')\n\nexport type {\n  Registry,\n  NameService,\n  MatchaError,\n  MatchaErrorType,\n  AllowedTopLevelDomains,\n  Network,\n  RpcURLs\n}\n\nexport { services, allowedTopLevelDomains, registry }\n"],"names":["ALPHABET","ALPHABET_MAP","z","x","polymodStep","pre","b","prefixChk","prefix","chk","i","c","v","encode","words","LIMIT","result","__decode","str","lowered","uppered","split","wordChars","decodeUnsafe","res","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","toWords","fromWordsUnsafe","fromWords","bech32","MatchaErrorType","MatchaError","message","errorType","__publicField","_CosmWasmClientHandler","CosmWasmClientHandler","rpcUrl","_client","CosmWasmClient","NameService","rpcUrls","serviceID","ICNS","name","network","options","client","_b","_a","username","_d","_c","address","addr","IBCDomains","junoAddress","StargazeNames","ArchIdNames","sha3","jsSha3","normalize","toUnicode","decodeLabelhash","hash","isEncodedLabelhash","namehash","inputName","node","labels","labelSha","normalisedLabel","domainNode","domain","chainRpcUrls","SpaceIds","contractAddress","trimTld","SNS","decoded","addressBytes","BDD","coreAddress","NibId","DegeNS","supportedTopLevelDomainListForAllChains","allowedTopLevelDomains","services","_icnsID","_ibcDomainsID","_stargazeNamesID","_archId","_spaceId","_sns","_bdd","_nibId","_degeNS","allowedTopLevelDomainData","Registry","service","record","registry"],"mappings":"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","x_google_ignoreList":[0]}