import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
/**
 * Types of errors
 */
export declare enum MatchaErrorType {
    NETWORK = "network",
    NOT_FOUND = "not-found",
    UNREGISTERED_SERVICE = "unregistered-service",
    DUPLICATE_SERVICE = "duplicate-service",
    INVALID_ADDRESS = "invalid-address",
    UNAVAILABLE_METHOD = "invalid-address"
}
/**
 * Custom error class
 */
export declare class MatchaError extends Error {
    type: MatchaErrorType;
    constructor(message: string, errorType: MatchaErrorType);
}
export type Addr = {
    prefix: string | null;
    words: number[] | null;
};
export type Network = 'mainnet' | 'testnet';
export type AllowedTopLevelDomains = {
    icns?: string[];
    ibcDomains?: string[];
    archIds?: string[];
    stargazeNames?: string[];
    spaceIds?: string[];
    sns?: string[];
    bdd?: string[];
    nibId?: string[];
    degeNS?: string[];
};
export type rpcUrls = Record<Network, string>;
export type RpcURLs = {
    icns?: rpcUrls;
    ibcDomains?: rpcUrls;
    archIds?: rpcUrls;
    stargazeNames?: rpcUrls;
    spaceIds?: rpcUrls;
    sns?: rpcUrls;
    bdd?: rpcUrls;
    nibId?: rpcUrls;
    degeNS?: rpcUrls;
};
/**
 * What a NameService class needs to implement
 */
export declare abstract class NameService {
    /**
     * The unique identifier of the name service
     */
    abstract serviceID: string;
    /**
     * The chain on which the name service is deployed
     */
    abstract chain: string | string[];
    /**
     * The contract address of the name service
     */
    abstract contractAddress: {
        [key in Network]: string;
    } | Record<string, {
        [key in Network]: string;
    }>;
    /**
     * @param name Resolve this name into an address
     */
    abstract resolve(name: string, network: Network, options?: {
        allowedTopLevelDomains?: AllowedTopLevelDomains;
        rpcUrls?: RpcURLs;
    }): Promise<string>;
    /**
     * @param address Lookup this address and returns primary name
     */
    abstract lookup(address: string, network: Network, options?: {
        rpcUrls?: RpcURLs;
    }): Promise<string>;
    /**
     * @param network The network to use
     */
    getCosmWasmClient(rpcUrl: string): Promise<CosmWasmClient>;
}
